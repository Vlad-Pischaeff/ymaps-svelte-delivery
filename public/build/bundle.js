
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.2' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /**
     * @author Peter Kelley
     * @author pgkelley4@gmail.com
     */

    function randomInteger(min, max) {
    	// случайное число от min до (max+1)
    	let rand = min + Math.random() * (max + 1 - min);
    	return Math.floor(rand);
    }

    /**
     * swap x,y for correct working with yMaps
     * меняем местами координаты
     * 
     * @param {Array} arr array of coordinates [{"Lat": x, "Lon": y}, {}...]
     * 
     * @return {Array} of swaped coordinates [[y, x], []...]
     */
    const setCoordArray = (arr) => {
    	return arr.map(n => [n.Lat, n.Lon]);
    };

    /**
     * swap x,y for correct working with yMaps
     * меняем местами координаты
     * 
     * @param {Array} arr array of coordinates [[x, y], []...]
     * 
     * @return {Array} of swaped coordinates [[y, x], []...]
     */
    const swapXY = (arr) => {
    	return arr.map(n => n.reverse());
    };

    let MKAD = [[37.37305113134754,55.789845569071915],[37.37136017849624,55.788125163916355],[37.37088810970964,55.787230465235055],[37.370330210234535,55.78606974430356],[37.37007271816909,55.78493317140559],[37.36981522610367,55.783893298947454],[37.369600649382484,55.78263574153174],[37.369514818694014,55.78135395838063],[37.36955773403825,55.78031398998733],[37.369514818694014,55.77905631655508],[37.36930024197281,55.77775022792185],[37.36942898800552,55.77651665940302],[37.36942898800552,55.77530724043539],[37.36930024197286,55.77409778378345],[37.36930024197286,55.773033430746054],[37.36921441128438,55.771896475941794],[37.36925732662862,55.77078367941565],[37.36921441128438,55.769453119953056],[37.369171495940144,55.767928968525545],[37.36921441128441,55.76681605826095],[37.369085665251696,55.76563053179125],[37.369042749907464,55.764348186893855],[37.368999834563226,55.763138388729345],[37.36891400387475,55.76197694702599],[37.36895691921899,55.76062188779507],[37.36895691921899,55.7593877748514],[37.36891400387475,55.75829881909379],[37.368742342497804,55.75687103083533],[37.36878525784207,55.75563679869122],[37.3688281731863,55.75449933433216],[37.3688281731863,55.753313431764624],[37.36874234249783,55.75207908655421],[37.36874234249783,55.75048164040621],[37.36891400387478,55.74905356475163],[37.36908566525175,55.74755281850865],[37.369428988005644,55.74605201428977],[37.36994397213651,55.744430112293536],[37.370630617644316,55.7429291874497],[37.371403093840605,55.74137978485359],[37.372261400725364,55.73985453133153],[37.37277638485622,55.738789239396176],[37.373505945708274,55.73731230908809],[37.37432133724882,55.735980602500774],[37.37479340603542,55.73479413455444],[37.37560879757597,55.73326862254669],[37.376295443083784,55.73191256160915],[37.377067919280066,55.7305322367148],[37.37784039547635,55.72903077503777],[37.37848412563993,55.72750503683523],[37.3791278558035,55.72636674870157],[37.379900331999785,55.72496200677402],[37.38045823147489,55.7238720858268],[37.38101613094999,55.722733691329985],[37.381531115080854,55.721692152276916],[37.38208901455593,55.720674808130745],[37.382732744719505,55.71941520231296],[37.38333355953884,55.71808288253171],[37.383891459013945,55.71713811902973],[37.38453518917752,55.71590262443702],[37.385136003996855,55.714667090597985],[37.38577973416043,55.71340729020261],[37.38650929501248,55.712123220883704],[37.38736760189724,55.71103294007593],[37.388397570158965,55.70984571066633],[37.38938462307644,55.70885228678828],[37.391187067534446,55.70749537416425],[37.39286076595975,55.706283805045246],[37.394362803008086,55.70514489567346],[37.395993586089155,55.703933253362564],[37.397538538481726,55.70272157332291],[37.39895474484163,55.70180067126567],[37.400456781889964,55.70063739540406],[37.40187298824983,55.699595264583536],[37.403289194609684,55.69848039606736],[37.404834147002276,55.69738973292108],[37.40667950680451,55.69615361107454],[37.408095713164364,55.69499016641651],[37.40972649624548,55.69387516599352],[37.41092812588413,55.69278437379985],[37.41191517880163,55.691863236588866],[37.41273057034215,55.69082087082695],[37.41354596188267,55.68958454037016],[37.41427552273472,55.688323927716496],[37.414790506865586,55.6870147867594],[37.41504799893103,55.68597229118314],[37.41556298306187,55.68461458068142],[37.41629254391394,55.68325682283988],[37.41719376614294,55.682092992731135],[37.41796624233922,55.680929127834695],[37.418910379912475,55.67974097987635],[37.41994034817418,55.67840730123646],[37.42097031643591,55.676928076968345],[37.42191445400914,55.67571555616528],[37.422901506926635,55.674357488056415],[37.42384564449986,55.67304787753962],[37.42470395138467,55.67202926115065],[37.42560517361367,55.67074382626105],[37.42676388790811,55.66926431096586],[37.42779385616984,55.6678575066118],[37.42882382443155,55.66642639489545],[37.42989670803751,55.665068002951195],[37.43096959164345,55.663709563654095],[37.43204247524942,55.66242385427427],[37.43315827419962,55.661526258433156],[37.43431698849406,55.66014343519654],[37.435776110198155,55.6589061307192],[37.43710648586954,55.65781435885076],[37.43839394619669,55.65664976849115],[37.4395526604911,55.65560646007565],[37.44096886685099,55.65451459578579],[37.442299242522374,55.653349906835615],[37.44380127957076,55.65218518309602],[37.44517457058638,55.65106895685476],[37.44641911556927,55.64997696547849],[37.44770657589642,55.64881214096731],[37.44916569760054,55.64757447679612],[37.45053898861617,55.64636104241359],[37.45195519497602,55.645196109882384],[37.453457232024356,55.643958330937984],[37.45500218441695,55.642647698646904],[37.45641839077681,55.64145838308135],[37.457920427825144,55.640074847914356],[37.45929371884077,55.639006822298384],[37.46062409451215,55.637817395710854],[37.46204030087201,55.636676483069216],[37.46319901516645,55.63560836439698],[37.464701052214785,55.63432172807537],[37.465945597197695,55.63322926770054],[37.467533464934526,55.63191827487099],[37.46886384060591,55.630825747196006],[37.47023713162154,55.62958751218235],[37.47148167660445,55.62851919941991],[37.47289788296431,55.62723232930394],[37.47461449673388,55.625872571380505],[37.47615944912644,55.624488483403745],[37.4776614861748,55.623322897560826],[37.47907769253466,55.62210870862499],[37.480408068206046,55.62077305716869],[37.482081766631325,55.61936450248389],[37.483626719023924,55.61812590378161],[37.48469960262986,55.61732443662046],[37.48577248623583,55.61637722694301],[37.48710286190722,55.61516282194168],[37.488476152922836,55.61392408992365],[37.489677782561515,55.61290392816251],[37.49100815823292,55.61178657756024],[37.49216687252736,55.61081494234457],[37.49336850216604,55.60974611568171],[37.49469887783743,55.60860438215773],[37.4959005074761,55.60753549498801],[37.496973391082044,55.606733810411],[37.49821793606496,55.60566487204169],[37.49924790432669,55.60464449448719],[37.50036370327689,55.60376986393675],[37.50143658688283,55.602798029248774],[37.50263821652151,55.6016803894571],[37.50383984616018,55.60073280023583],[37.50486981442189,55.59990667805644],[37.50628602078177,55.59888615006653],[37.50791680386282,55.59791419386096],[37.50963341763236,55.59706371234399],[37.51147877743461,55.59626181281277],[37.51289498379447,55.59555709963695],[37.514697428252454,55.59494957807621],[37.51637112667776,55.594536458018986],[37.51838814785696,55.59400182557838],[37.51993310024953,55.59351578973872],[37.521349306609416,55.59319986320078],[37.5231517510674,55.59276242223888],[37.525512095000515,55.59220346277189],[37.52714287808156,55.591838919681244],[37.52937447598199,55.59130425033581],[37.53130566647272,55.59086678815211],[37.533151026274965,55.590429321071014],[37.5352109627984,55.58989463243214],[37.53709923794489,55.58955437221644],[37.53907334377985,55.58901967160593],[37.541219110991754,55.58846065859976],[37.54332196285945,55.58799885921555],[37.54533898403865,55.58748844302111],[37.547613497283265,55.58695371414364],[37.54975926449517,55.586394671591485],[37.55177628567437,55.585932847794545],[37.55387913754207,55.58544671158653],[37.556067820098214,55.584936262060424],[37.55825650265436,55.58442580586784],[37.56031643917779,55.58391534300873],[37.562462206389725,55.58340487348305],[37.56473671963434,55.582845780162856],[37.56675374081354,55.58240822329054],[37.568813677336976,55.58182480650837],[37.570873613860456,55.58148447603697],[37.57301938107236,55.58087673567167],[37.57512223294004,55.58034191633446],[37.57722508480773,55.57985571058754],[37.57915627529846,55.57934518804508],[37.58113038113342,55.578907591988006],[37.58288991024717,55.57846999103269],[37.58486401608213,55.578081008293644],[37.587095613982534,55.57747321502189],[37.58876931240781,55.57708422236527],[37.59044301083312,55.57684109998951],[37.59207379391416,55.576476413591145],[37.59366166165099,55.57625760011933],[37.5952495293878,55.576087411016836],[37.596708651091895,55.57589290827829],[37.59851109554991,55.57589290827829],[37.600227709319455,55.575771343575354],[37.60207306912168,55.57560115235624],[37.60434758236632,55.575503899898436],[37.60653626492246,55.57540664719873],[37.60902535488829,55.57521214107361],[37.611214037444434,55.575066260844764],[37.613488550689105,55.57496900706258],[37.615591402556795,55.574798812351034],[37.61769425442447,55.57472587153359],[37.61966836025943,55.57462861689868],[37.62151372006168,55.57445842070549],[37.623270689264906,55.57439501438654],[37.6253735411326,55.57424913110903],[37.62751930834451,55.574078933264026],[37.62953632952371,55.57403030517224],[37.6319825041453,55.57388442053402],[37.63417118670144,55.57371422110151],[37.63644569994606,55.57359264962472],[37.63876312853493,55.573519706557235],[37.641295133845,55.57334950553721],[37.64335507036843,55.57327656201615],[37.64575832964579,55.57308204529469],[37.647517858759535,55.572984786571105],[37.64970654131571,55.57286321282643],[37.65176647783914,55.57274163870378],[37.65404099108376,55.57259574925768],[37.65498512865702,55.572571434297075],[37.65648716570535,55.572425544215946],[37.65820377947489,55.57230396873257],[37.659963308588644,55.57227965359053],[37.661980329767836,55.572133762420805],[37.6634823668162,55.57201218603024],[37.665241895929945,55.571939240014494],[37.667216001764906,55.571817663019154],[37.66878486633732,55.57176117741397],[37.67118812561467,55.572004331377876],[37.67303348541692,55.572004331377876],[37.67475009918644,55.57222316865268],[37.6767242050214,55.57246631974389],[37.678612480167885,55.572855358345],[37.680543670658615,55.573268707617736],[37.682131538395446,55.57387656625771],[37.683762321476486,55.574265590828254],[37.685779342655685,55.57501931491951],[37.687410125736754,55.57550558081616],[37.689040908817795,55.57618634291171],[37.69037128448918,55.57662396942834],[37.69200206757025,55.577231775908565],[37.69367576599553,55.57788819629416],[37.695091972355385,55.57844736052223],[37.6968944168134,55.579103760504395],[37.698267707829025,55.579565664992124],[37.69981266022162,55.580149115491594],[37.70140052795843,55.580683937466524],[37.70303131103947,55.58134029989004],[37.704747924809006,55.581899414743425],[37.70612121582463,55.58255575675839],[37.70805240631535,55.58313916263108],[37.709597358707924,55.58377117583369],[37.71114231110052,55.584378871199156],[37.71255851746038,55.58498655712264],[37.71466136932805,55.58571576775225],[37.71667839050725,55.58634773929308],[37.71813751221134,55.58705261857173],[37.71972537994817,55.58766026291881],[37.72152782440619,55.5883165082021],[37.722944030766044,55.58902135197293],[37.72457481384709,55.58960466134199],[37.726076850895446,55.5902365699999],[37.727664718632255,55.590989986198956],[37.72903800964787,55.591548963030526],[37.73071170807318,55.59220514301414],[37.73199916840033,55.59283700962102],[37.73367286682561,55.59342026203529],[37.735432395939384,55.594149315309984],[37.73719192505314,55.5949269571425],[37.73890853882268,55.59572888407186],[37.74011016846136,55.596214892382015],[37.741698036198166,55.5968952938594],[37.74371505737736,55.59759998289766],[37.745045433048745,55.59828036025289],[37.74667621612981,55.59888783002141],[37.748221168522385,55.59951958856021],[37.74998069763616,55.60032142122328],[37.75156856537297,55.601001751181975],[37.75311351776556,55.60170636614804],[37.75440097809271,55.60241096840391],[37.755903015141044,55.60301837394045],[37.75684715271427,55.60362577003139],[37.75783420563177,55.604184566092826],[37.75886417389347,55.60484053387694],[37.76019454956486,55.60547219614542],[37.761567840580504,55.606249612611485],[37.763026962284606,55.60697842648835],[37.7644860839887,55.60773151987265],[37.765516052250426,55.60833884266875],[37.766760597233315,55.60906761755683],[37.76800514221623,55.60969921145859],[37.769163856510666,55.61033079514496],[37.770279655460875,55.61105953285879],[37.7712237930341,55.61159393187199],[37.77212501526312,55.61200687155466],[37.772811660770934,55.612346936249544],[37.77375579834416,55.612905607532866],[37.77487159729437,55.61358571830606],[37.77615905762152,55.614290106260746],[37.77731777191593,55.61492161569195],[37.778433570866135,55.61562597954547],[37.779163131718185,55.616014588645655],[37.7800643539472,55.61647605692798],[37.78118015289738,55.61698609447275],[37.78233886719182,55.61778756858018],[37.78332592010931,55.61824901591114],[37.784484634403725,55.61890474746337],[37.78581501007511,55.61963332515831],[37.787231216434996,55.620264748160956],[37.788089523319755,55.62065331108585],[37.78903366089299,55.62113900930269],[37.789977798466246,55.62152756352473],[37.79113651276066,55.622134671753344],[37.79220939636662,55.62281462175859],[37.793625602726486,55.62347027661687],[37.79469848633245,55.62417448623354],[37.7959859466596,55.624830118247736],[37.7970159149213,55.62551002129575],[37.79787422180609,55.6261170675795],[37.79881835937932,55.6267241044207],[37.79997707367376,55.62754965937156],[37.80074954987004,55.62825379538167],[37.80199409485296,55.628739399020404],[37.80280948639348,55.62951635227299],[37.804139862064865,55.6301718945469],[37.805298576359306,55.63085170453176],[37.806543121342244,55.631822841113625],[37.80783058166939,55.6327211209265],[37.80916095734078,55.63344944072775],[37.8100621795698,55.63405636350975],[37.811392555241184,55.63502742032276],[37.81268001556833,55.635707145710796],[37.81370998383004,55.63641113452045],[37.81469703674753,55.637018011228875],[37.81572700500924,55.63774625081679],[37.81684280395944,55.638523024725856],[37.8179156875654,55.63910559500682],[37.81868816376169,55.63971242979751],[37.81963230133492,55.64034352796513],[37.8208339309736,55.64112025015398],[37.82173515320262,55.64172705360183],[37.82285095215279,55.64247947676626],[37.82439590454539,55.643280427410254],[37.82534004211862,55.644008550085694],[37.82649875641306,55.644760929235915],[37.827485809330526,55.64539194571821],[37.828258285526815,55.645998682706995],[37.82954574585396,55.64682382986267],[37.830747375492685,55.64757615470558],[37.83169151306592,55.64823139354386],[37.832764396671884,55.64891088885768],[37.83370853424512,55.64959037233061],[37.83469558716261,55.65043971002066],[37.8355968093916,55.65119196509591],[37.836369285587885,55.652065533421045],[37.83731342316115,55.65306040684092],[37.83778549194778,55.65388540456779],[37.838343391422846,55.6546133292405],[37.83877254486524,55.655608137645636],[37.83920169830763,55.65677275913088],[37.83941627502882,55.65779177439472],[37.83967376709423,55.65854388761681],[37.83980251312697,55.659756942879156],[37.839931259159684,55.66063031929181],[37.83984542847121,55.661697752774536],[37.83958793640576,55.66269238038903],[37.83924461365187,55.66400233900283],[37.838650372543704,55.665641575650504],[37.83843579582252,55.66649056366849],[37.838092473068606,55.6671939968711],[37.83792081169166,55.668115717708254],[37.837405827560794,55.6689403968181],[37.83723416618385,55.66998334834308],[37.83684792808569,55.67109903302091],[37.83637585929906,55.67216617977424],[37.83598962120093,55.673306054245906],[37.8355175524143,55.67442164377457],[37.83521714500465,55.67527044049309],[37.834959652939204,55.676119218717055],[37.8344875841526,55.677016478444074],[37.83418717674292,55.67827745717956],[37.833758023300526,55.67924741304383],[37.83345761589087,55.680096104616744],[37.83311429313695,55.6809932727358],[37.83272805503882,55.68179343227054],[37.83225598625219,55.682642068358035],[37.83186974815406,55.68358766964343],[37.83161225608862,55.684436266632495],[37.831311848678965,55.685575782071396],[37.830882695236575,55.68632735911052],[37.83062520317115,55.68722438368354],[37.83032479576147,55.688072901422025],[37.83006730369605,55.689139583201275],[37.82976689628637,55.6904971359281],[37.82955420969301,55.69127112603929],[37.8294254636603,55.69180442677124],[37.82946837900454,55.69284676619885],[37.8294254636603,55.69359820289213],[37.8294254636603,55.69447082084908],[37.829597125037246,55.69548885040903],[37.829725871069954,55.69660380461639],[37.830026278479615,55.69720974459481],[37.830155024512344,55.69805804471708],[37.83036960123353,55.698833617220856],[37.830798754675925,55.69985153267823],[37.831270823462525,55.700796716050256],[37.83187163828186,55.70162070333751],[37.832325286365915,55.70249933008235],[37.83279735515254,55.70334751491569],[37.83326755467866,55.70413822428912],[37.833610877432555,55.70503483850572],[37.83416877690766,55.7059798959904],[37.834769591726996,55.706900699153685],[37.835155829825155,55.7077972497162],[37.83545623723481,55.708548397795425],[37.83609996739838,55.7095418294331],[37.83652912084077,55.710753297099885],[37.83725868169282,55.711843585745],[37.83781658116793,55.7125462000138],[37.838074073233344,55.71378180122093],[37.83867488805269,55.71484777856866],[37.83867488805269,55.71598640392193],[37.83884654942963,55.716955420521025],[37.83897529546236,55.71780329024131],[37.83910404149508,55.71911139583776],[37.839146956839336,55.720128780889944],[37.83944736424902,55.72114613932057],[37.83949027959326,55.72201813964924],[37.839619025625964,55.72276901315262],[37.839619025625964,55.72398006889634],[37.84000526372412,55.724852005676766],[37.83991943303565,55.7257239229044],[37.840048179068354,55.72676535396798],[37.8402198404453,55.727879412130434],[37.840434417166485,55.72894500311043],[37.84047733251072,55.72988947978938],[37.84060607854346,55.73080971704684],[37.84060607854346,55.73185101188212],[37.84069190923196,55.732989139453586],[37.84099231664164,55.73427251992348],[37.84112106267435,55.73548321737191],[37.84129272405129,55.73659702571731],[37.841550216116744,55.73785607497673],[37.841550216116744,55.73913929475002],[37.8418506235264,55.74044668263952],[37.841893538870636,55.74156034874178],[37.84203001318296,55.74286017339222],[37.84203001318296,55.74407060333325],[37.84211584387144,55.745329410472],[37.84211584387144,55.74656397016656],[37.84220167455991,55.74789531410732],[37.842287505248386,55.749129792267226],[37.842330420592646,55.7503158225684],[37.84241625128112,55.75138079851252],[37.84250208196959,55.75254255715818],[37.84250208196959,55.75380108980666],[37.84254499731383,55.75476916409516],[37.842716658690776,55.7559066205518],[37.84254499731383,55.7571408441274],[37.842845404723484,55.75820563294962],[37.84280248937925,55.75941558480988],[37.84293123541196,55.76079488394525],[37.84288832006772,55.76207734620252],[37.843102896788935,55.76309360696511],[37.84297415075622,55.7641098411286],[37.843145812133166,55.765247024012716],[37.843059981444696,55.76626320181275],[37.84327455816588,55.76766645124482],[37.84323164282164,55.76875514430454],[37.84336038885435,55.76955349981007],[37.84336038885435,55.77081148122492],[37.84336038885435,55.77211780338939],[37.843188727477404,55.77325475171042],[37.843188727477404,55.774391666727055],[37.843188727477404,55.775165717468994],[37.84280248937925,55.7764477050511],[37.84280248937925,55.777294277407115],[37.84280248937925,55.77809245728487],[37.84254499731383,55.77925341689097],[37.84245916662536,55.78024504238278],[37.842373335936884,55.78118827238208],[37.842287505248386,55.78193800295457],[37.84215875921568,55.7830504796779],[37.84198709783873,55.78435638991265],[37.84185835180602,55.78537206748321],[37.84185835180602,55.78631517284633],[37.84168669042907,55.78742752406166],[37.84168669042907,55.78846730178908],[37.84160085974057,55.7895070516458],[37.84142919836363,55.7906434905396],[37.841171706298205,55.79132050213908],[37.84121462164244,55.7920458585966],[37.841085875609735,55.79267448988691],[37.8410429602655,55.79371412696855],[37.84087129888852,55.794342731218954],[37.84091421423276,55.79518891315888],[37.84061380682311,55.79620430711541],[37.8407854682001,55.79702627323287],[37.84052797613466,55.79782404720853],[37.84052797613466,55.798742675697675],[37.84027048406924,55.79973380308078],[37.84044214544618,55.800459002188525],[37.840227568725005,55.80135339574111],[37.84014173803653,55.80219942470725],[37.839884245971085,55.80319046373067],[37.83979841528261,55.804350672348555],[37.839884245971085,55.80563169569596],[37.839884245971085,55.8068401694833],[37.839583838561424,55.8080244372439],[37.839455092528716,55.808942824073505],[37.83941217718448,55.81019952867549],[37.83924051580751,55.81148035874489],[37.839154685119034,55.812881973334335],[37.83894010839785,55.81399356265528],[37.83894010839785,55.81520177575415],[37.838682616332434,55.8163616248899],[37.83851095495546,55.817497276863996],[37.838339293578514,55.818608733801426],[37.83803888616886,55.8195751921797],[37.8376526480707,55.82087987275108],[37.837137663939835,55.82203955193819],[37.83619352636661,55.82339246710968],[37.835163558104874,55.824624545176384],[37.83413358984317,55.82575995497304],[37.832631552794815,55.82701611426762],[37.831387007811905,55.82795820700546],[37.829455817321204,55.82931091547948],[37.82735296545351,55.83034957027834],[37.8257650977167,55.831170812493],[37.824177229979895,55.83196788387774],[37.82246061621036,55.83283739758094],[37.82065817175234,55.83390011003913],[37.81876989660585,55.83476958035872],[37.81718202886905,55.83566318228843],[37.815422499755265,55.83650846243141],[37.813748801329986,55.83740202423284],[37.81190344152774,55.83831971488861],[37.810100997069725,55.839213234890785],[37.808513129332916,55.840058437535724],[37.80701109228456,55.84083117809286],[37.80550905523623,55.84162805063825],[37.80430742559755,55.8421834369548],[37.80314871130314,55.84281125537044],[37.80173250494325,55.843632233320236],[37.800144637206444,55.84447733949351],[37.798771346190826,55.845056830206005],[37.79696890173281,55.84599848411113],[37.79550978002871,55.84669867345315],[37.793964827636145,55.847567856386554],[37.792376959899315,55.84843701980127],[37.79100366888369,55.84911302229629],[37.7896732932123,55.849813155290136],[37.788471663573624,55.85046499186443],[37.78688379583682,55.85118924184839],[37.78546758947696,55.851985901175965],[37.7838368063959,55.85280668454225],[37.782334769347564,55.85355503067428],[37.78066107092226,55.85439992020394],[37.779159033873924,55.85519651343545],[37.77769991216983,55.85594481335072],[37.77649828253115,55.85657240857262],[37.775167906859764,55.857272406618456],[37.77362295446719,55.858044803558066],[37.772249663451575,55.858720638231134],[37.77109094915716,55.859444733715094],[37.76915975866643,55.86038603757523],[37.76697107611029,55.861351453640275],[37.76525446234075,55.8624857867312],[37.76323744116155,55.86333048125523],[37.76109167394964,55.86439235677305],[37.75916048345892,55.8654542031404],[37.75701471624701,55.86658841592465],[37.754954779723576,55.86765020200492],[37.75302358923285,55.86863956734398],[37.75104948339789,55.86965303730213],[37.74903246221869,55.87076299773547],[37.74710127172797,55.871752283443804],[37.74482675848333,55.87281392775755],[37.74319597540234,55.873803161004346],[37.74177976904245,55.874454593464066],[37.74023481664988,55.87529902661434],[37.738475287536104,55.87626407048976],[37.73667284307812,55.87708433884531],[37.734741652587395,55.87802521347036],[37.732724631408196,55.879038437459535],[37.730836356261705,55.87993101754395],[37.728776419738274,55.88096831445241],[37.72697397528026,55.881860849978196],[37.72538610754343,55.882584512302955],[37.723540747741204,55.883669980388],[37.72212454138132,55.884345367374344],[37.72045084295604,55.885165464270095],[37.71920629797312,55.88586494493066],[37.71800466833445,55.886492054760396],[37.71603056249949,55.88752917561032],[37.71444269476268,55.888300968412885],[37.71276899633738,55.88914509914235],[37.711009467223626,55.889989211433466],[37.709421599486795,55.89073683835073],[37.7079624777827,55.891363869128284],[37.70637461004589,55.892063237607566],[37.70465799627635,55.892690246861946],[37.703070128539544,55.89310020895024],[37.7012247687373,55.893582511720574],[37.69985147772167,55.89396834960223],[37.69787737188666,55.8942094963281],[37.69513078985541,55.89461944229704],[37.69242712316841,55.894691785251815],[37.69032427130073,55.894812356542076],[37.688049758056145,55.894908813316306],[37.68598982153271,55.894932927469014],[37.683672392943826,55.894932927469014],[37.68105455694529,55.89505349800677],[37.67839380560252,55.89510172611651],[37.67586180029246,55.89527052402653],[37.67294355688427,55.89534286576221],[37.67088362036083,55.895391093517205],[37.668394530395005,55.895439321205544],[37.66564794836376,55.89555989016299],[37.66320177374217,55.89565634505806],[37.66045519171092,55.89587336769148],[37.6579661017451,55.89604216223024],[37.65534826574657,55.89630740930115],[37.65324541387889,55.89635563584567],[37.650327170470675,55.89678967203728],[37.64770933447214,55.896982575446124],[37.64556356726023,55.897271928753405],[37.64320322332712,55.89746482975424],[37.64131494818066,55.89777829182629],[37.6392550116572,55.89811586352102],[37.63728090582224,55.89835698435413],[37.6352209692988,55.898622215532306],[37.632560217956026,55.89908033782367],[37.63062902746535,55.89944200948566],[37.62813993749953,55.899900122055],[37.626122916320334,55.90033411842505],[37.62414881048537,55.90062344662955],[37.622131789306174,55.90112976577287],[37.61977144537306,55.90163607827952],[37.617196524718786,55.90221471301781],[37.61466451940872,55.90281744831942],[37.61256166754102,55.90327552085827],[37.610415900329116,55.90383002245258],[37.60848470983839,55.904408624324496],[37.60668226538041,55.90486667799248],[37.605180228332046,55.90532472622803],[37.603120291808615,55.90590330570807],[37.6014036780391,55.90645776957627],[37.59925791082721,55.90696401224936],[37.59732672033649,55.907542567171106],[37.59556719122271,55.90804879561759],[37.5937647467647,55.90850680611298],[37.59204813299518,55.90908533792159],[37.589859450439036,55.909639756105044],[37.58801409063679,55.910025433624874],[37.58595415411335,55.91043521176894],[37.583851302245655,55.910676255704715],[37.58183428106646,55.91089319396037],[37.5793022757564,55.911037818787],[37.576984847167545,55.91115833906209],[37.57483907995566,55.91108602694866],[37.57117832861289,55.91096550644785],[37.56840177831992,55.91060394268843],[37.56501146612509,55.91031468924328],[37.562436545470796,55.90990490982019],[37.559647048095314,55.90954333612966],[37.557200873473725,55.90939870570546],[37.55432554540977,55.90906123260907],[37.5522226935421,55.90884428406112],[37.54930445013388,55.90850680611944],[37.546686614135346,55.90831396025716],[37.544712508300385,55.908048795624055],[37.542738402465424,55.90780773528668],[37.54054971990928,55.907590779696484],[37.538232291320426,55.90734971650005],[37.53621527014123,55.90713275834314],[37.533854926208114,55.90684347889595],[37.53153749761923,55.906409555662236],[37.529477561095796,55.905975627553],[37.5274605399166,55.90546937193001],[37.525443518737404,55.90486667801185],[37.5232977515255,55.90399878224665],[37.52115198431359,55.903106757942744],[37.51904913244589,55.90211827451609],[37.51686044988975,55.90122620678137],[37.51505800543173,55.90040645069872],[37.51325556097375,55.89958667721912],[37.511281455138786,55.89876688634234],[37.509350264648056,55.897850628892165],[37.50754782019005,55.89710313961336],[37.506045783141715,55.896355635871494],[37.50428625402793,55.89555989018882],[37.502526724914155,55.89488469918084],[37.500938857177374,55.89420949637976],[37.498836005309705,55.89326901566276],[37.497205222228665,55.892593784620075],[37.49540277777065,55.89179796145668],[37.49347158727993,55.89085742204085],[37.49175497351038,55.890158031737194],[37.490038359740865,55.88948274632948],[37.488450492004034,55.88890392087351],[37.48656221685757,55.88830096847099],[37.48450228033411,55.8877221253205],[37.48218485174526,55.88711915447932],[37.47969576177943,55.88651617423057],[37.47780748663295,55.88596142409285],[37.47531839666715,55.885454906143345],[37.47244306860316,55.88468305650335],[37.469782317260396,55.88400767542411],[37.46694990454068,55.883428767963224],[37.46403166113246,55.88309106794033],[37.46154257116668,55.88297046008069],[37.458967650512385,55.88284985183829],[37.45677896795624,55.88289809518041],[37.454547370055835,55.88277748671224],[37.45231577215545,55.88270512145067],[37.450127089599306,55.882536268646874],[37.447723830321955,55.882222682911475],[37.4451918250119,55.8818367277448],[37.443303549865455,55.88133015574676],[37.44175859747289,55.88084770004678],[37.44017072973605,55.88038936155448],[37.43862577734349,55.879955141127866],[37.437166655639395,55.87947266826678],[37.43549295721409,55.878990189384176],[37.4341625815427,55.87850770448],[37.432360137084686,55.878001088849885],[37.430386031249725,55.87734971614178],[37.428841078857154,55.87684308533702],[37.42703863439914,55.87626407057367],[37.424420798400604,55.87554028993169],[37.42309042272922,55.87505776197213],[37.421888793090545,55.87467173526871],[37.420343840697974,55.87411681513687],[37.41892763433812,55.873754906408216],[37.41764017401096,55.873248228497275],[37.41652437506076,55.87295869528155],[37.415537322143294,55.872596775719636],[37.41450735388157,55.8721865961138],[37.41321989355441,55.87160751161594],[37.412232840636946,55.87105254750133],[37.41115995703098,55.87059409287773],[37.41034456549046,55.87015976243128],[37.40914293585178,55.86965303741172],[37.4083704596555,55.86914630575252],[37.407125914672584,55.868494783862936],[37.406267607787825,55.86781911994615],[37.405452216247284,55.867239970045404],[37.404679740050994,55.86670907501782],[37.40395017919895,55.86615404060632],[37.40309187231419,55.86555073329892],[37.402233565429434,55.864923283716564],[37.4015469199216,55.86410275737256],[37.40081735906955,55.86323394579424],[37.40004488287327,55.862509921238924],[37.399315322021216,55.86181001795377],[37.39875742254611,55.86098942556172],[37.39824243841525,55.86033776626204],[37.39785620031712,55.85968609598514],[37.397341216186256,55.858986141615105],[37.3969549780881,55.85814135222659],[37.3964829093015,55.85734481962188],[37.39605375585911,55.8566206848418],[37.39566751776098,55.85587239799764],[37.39519544897435,55.85497926249762],[37.394895041564666,55.854303362469516],[37.394508803466536,55.85365159054664],[37.394122565368384,55.852999807645475],[37.393736327270254,55.85217902837542],[37.39330717382786,55.85130994899662],[37.392792189697,55.85056155944738],[37.39240595159887,55.84978901311926],[37.39206262884495,55.84899230856631],[37.391805136779524,55.84826801746792],[37.39163347540256,55.8473505626184],[37.391719306091055,55.84640894161289],[37.39184805212376,55.845515587682314],[37.39206262884495,55.84469464967544],[37.39266344366428,55.843728817971204],[37.39317842779515,55.84307686794341],[37.39360758123752,55.842400760020794],[37.39403673467991,55.84177293494785],[37.39429422674533,55.84128998565555],[37.39459463415501,55.84063799455406],[37.394937956908905,55.84008258606612],[37.3950237875974,55.83962376434882],[37.395367110351295,55.83875440302529],[37.395452941039764,55.838029920350124],[37.39566751776098,55.837160523237685],[37.39566751776098,55.83655676375747],[37.395710433105236,55.83571148467531],[37.395710433105236,55.83525261115694],[37.39579626379371,55.834721277131564],[37.395667517761,55.834093327520165],[37.39558168707253,55.83363443482601],[37.39545294103982,55.833127231310954],[37.395367110351344,55.83276493901868],[37.39515253363014,55.832161110999635],[37.39506670294166,55.83160558090676],[37.39480921087625,55.83105004284498],[37.39468046484353,55.83054280548104],[37.394508803466564,55.82996309750179],[37.39425131140114,55.82938338084539],[37.394122565368434,55.82885196628765],[37.39420839605693,55.82817560994797],[37.39395090399151,55.82752339800003],[37.39390798864727,55.82699195792241],[37.3938221579588,55.826436353681416],[37.393650496581856,55.826001527412004],[37.39356466589336,55.82561501107475],[37.39339300451641,55.825156017915],[37.3932642584837,55.82472117727317],[37.3932642584837,55.82433464816036],[37.39304968176252,55.823899798298335],[37.39296385107404,55.82344078481499],[37.39279218969707,55.82310256087339],[37.39270635900865,55.82254690085082],[37.39249178228744,55.822039552124735],[37.39249178228744,55.82155635668466],[37.39227720556626,55.82107315521805],[37.39201971350084,55.82061410824269],[37.39201971350084,55.8201550558283],[37.39180513677963,55.81974432011032],[37.39159056005845,55.819140289085624],[37.3914188986815,55.81872954260998],[37.39137598333726,55.818173819859176],[37.391161406616106,55.817690576224905],[37.390903914550684,55.81725565178388],[37.39077516851795,55.81667574493529],[37.39051767645253,55.81614415603335],[37.39030309973135,55.815636723460344],[37.39021726904287,55.81510512030453],[37.39008852301014,55.81457350985594],[37.390045607665904,55.81411438587234],[37.38991686163319,55.81360692671985],[37.38970228491201,55.81307529571865],[37.389187300781145,55.81266448495626],[37.389187300781145,55.811601189803774],[37.38850065527333,55.8103445306491],[37.38850065527333,55.80937784203447],[37.38832899389639,55.80850780166704],[37.38781400976552,55.807444392474075],[37.387299025634654,55.80647763152765],[37.386784041503795,55.805510846469936],[37.38626905737295,55.80454403730064],[37.385582411865116,55.80357720401938],[37.38472410498036,55.80251365956034],[37.38369413671865,55.80164346511976],[37.38335081396473,55.800579867612576],[37.38232084570303,55.799612935468936],[37.38146253881825,55.798742675922504],[37.38043257055654,55.797969095483765],[37.37940260229481,55.79690539718111],[37.37888761816395,55.79564826156833],[37.377857649902246,55.79477791303953],[37.37665602026357,55.793617417949164],[37.37579771337881,55.79274702384208],[37.37476774511708,55.79158646797978],[37.373566115478404,55.790716028293105],[37.37305113134754,55.789845569071915]];

    function PointObject(item) {
      let r = randomInteger(16, 255).toString(16);
      let g = randomInteger(16, 255).toString(16);
      let b = randomInteger(16, 255).toString(16);

      let optionsArea = { 
        fillColor: '#' + r + g + b, 
        strokeColor: '#003dаe', 
        opacity: 0.5, 
        strokeWidth: 2, 
        strokeStyle: 'shortdash'
      };

      this.CoordinatesJson = setCoordArray(item.CoordinatesJson);

      let polygon = new ymaps.GeoObject({ 
        geometry: { type: "Polygon", coordinates: [ this.CoordinatesJson ] },
        properties:{ balloonContent: item.Name }}, optionsArea);
      this.Polygon = polygon;      // добавим в объект поле "полигон"

      let square = Math.round(ymaps.util.calculateArea(polygon));
      this.Square = square;        // добавим в объект поле "площадь"

      this.Show = true;            // добавим в объект поле "показывать"
      this.Name = item.Name;
      this.Phone = item.Phone;
    }

    /* src\DelieryPoint.svelte generated by Svelte v3.44.2 */

    const file$1 = "src\\DelieryPoint.svelte";

    function create_fragment$1(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let div1;
    	let t1_value = /*point*/ ctx[0].Name + "";
    	let t1;
    	let t2;
    	let span;
    	let t3_value = (/*point*/ ctx[0].Square / 1e6).toFixed(3) + "";
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			span = element("span");
    			t3 = text(t3_value);
    			t4 = text(" км²");
    			attr_dev(div0, "class", "item_box svelte-1khpsio");
    			set_style(div0, "--bg-color", /*bgColor*/ ctx[3]);
    			set_style(div0, "--display", /*display*/ ctx[2]);
    			add_location(div0, file$1, 21, 2, 472);
    			attr_dev(div1, "class", "item_name svelte-1khpsio");
    			add_location(div1, file$1, 25, 2, 610);
    			attr_dev(span, "class", "item_square svelte-1khpsio");
    			add_location(span, file$1, 26, 2, 655);
    			attr_dev(div2, "class", "item svelte-1khpsio");
    			add_location(div2, file$1, 20, 0, 450);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, t1);
    			append_dev(div2, t2);
    			append_dev(div2, span);
    			append_dev(span, t3);
    			append_dev(span, t4);

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*bgColor*/ 8) {
    				set_style(div0, "--bg-color", /*bgColor*/ ctx[3]);
    			}

    			if (dirty & /*display*/ 4) {
    				set_style(div0, "--display", /*display*/ ctx[2]);
    			}

    			if (dirty & /*point*/ 1 && t1_value !== (t1_value = /*point*/ ctx[0].Name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*point*/ 1 && t3_value !== (t3_value = (/*point*/ ctx[0].Square / 1e6).toFixed(3) + "")) set_data_dev(t3, t3_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DelieryPoint', slots, []);
    	let { point, myMap } = $$props;
    	let show = true, display = 'block', bgColor;
    	const writable_props = ['point', 'myMap'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DelieryPoint> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(1, show = !show);

    	$$self.$$set = $$props => {
    		if ('point' in $$props) $$invalidate(0, point = $$props.point);
    		if ('myMap' in $$props) $$invalidate(4, myMap = $$props.myMap);
    	};

    	$$self.$capture_state = () => ({ point, myMap, show, display, bgColor });

    	$$self.$inject_state = $$props => {
    		if ('point' in $$props) $$invalidate(0, point = $$props.point);
    		if ('myMap' in $$props) $$invalidate(4, myMap = $$props.myMap);
    		if ('show' in $$props) $$invalidate(1, show = $$props.show);
    		if ('display' in $$props) $$invalidate(2, display = $$props.display);
    		if ('bgColor' in $$props) $$invalidate(3, bgColor = $$props.bgColor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*point*/ 1) {
    			{
    				$$invalidate(1, show = point.Show ? true : false);
    			} // console.log('show', point.Name, point.Show)
    		}

    		if ($$self.$$.dirty & /*show, myMap, point*/ 19) {
    			show
    			? myMap.geoObjects.add(point.Polygon)
    			: myMap.geoObjects.remove(point.Polygon);
    		}

    		if ($$self.$$.dirty & /*show, point*/ 3) {
    			$$invalidate(3, bgColor = show ? point.Polygon.options._options.fillColor : "#eee");
    		}

    		if ($$self.$$.dirty & /*show*/ 2) {
    			$$invalidate(2, display = show ? 'block' : 'none');
    		}
    	};

    	return [point, show, display, bgColor, myMap, click_handler];
    }

    class DelieryPoint extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { point: 0, myMap: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DelieryPoint",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*point*/ ctx[0] === undefined && !('point' in props)) {
    			console.warn("<DelieryPoint> was created without expected prop 'point'");
    		}

    		if (/*myMap*/ ctx[4] === undefined && !('myMap' in props)) {
    			console.warn("<DelieryPoint> was created without expected prop 'myMap'");
    		}
    	}

    	get point() {
    		throw new Error("<DelieryPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set point(value) {
    		throw new Error("<DelieryPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get myMap() {
    		throw new Error("<DelieryPoint>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set myMap(value) {
    		throw new Error("<DelieryPoint>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\App.svelte generated by Svelte v3.44.2 */
    const file = "src\\App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[35] = list[i];
    	return child_ctx;
    }

    // (122:2) {#if Loaded === false}
    function create_if_block_3(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Loading...";
    			add_location(h1, file, 122, 4, 3794);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(122:2) {#if Loaded === false}",
    		ctx
    	});

    	return block;
    }

    // (160:6) {#if deliveryPointsUpdSorted}
    function create_if_block(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*deliveryPointsUpdSorted*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*deliveryPointsUpdSorted, myMap, checked5*/ 145) {
    				each_value = /*deliveryPointsUpdSorted*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(160:6) {#if deliveryPointsUpdSorted}",
    		ctx
    	});

    	return block;
    }

    // (164:31) 
    function create_if_block_2(ctx) {
    	let deliverypoint;
    	let current;

    	deliverypoint = new DelieryPoint({
    			props: {
    				point: /*point*/ ctx[35],
    				myMap: /*myMap*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(deliverypoint.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(deliverypoint, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const deliverypoint_changes = {};
    			if (dirty[0] & /*deliveryPointsUpdSorted*/ 1) deliverypoint_changes.point = /*point*/ ctx[35];
    			if (dirty[0] & /*myMap*/ 16) deliverypoint_changes.myMap = /*myMap*/ ctx[4];
    			deliverypoint.$set(deliverypoint_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(deliverypoint.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(deliverypoint.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(deliverypoint, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(164:31) ",
    		ctx
    	});

    	return block;
    }

    // (162:10) {#if (checked5 && point.Show) }
    function create_if_block_1(ctx) {
    	let deliverypoint;
    	let current;

    	deliverypoint = new DelieryPoint({
    			props: {
    				point: /*point*/ ctx[35],
    				myMap: /*myMap*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(deliverypoint.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(deliverypoint, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const deliverypoint_changes = {};
    			if (dirty[0] & /*deliveryPointsUpdSorted*/ 1) deliverypoint_changes.point = /*point*/ ctx[35];
    			if (dirty[0] & /*myMap*/ 16) deliverypoint_changes.myMap = /*myMap*/ ctx[4];
    			deliverypoint.$set(deliverypoint_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(deliverypoint.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(deliverypoint.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(deliverypoint, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(162:10) {#if (checked5 && point.Show) }",
    		ctx
    	});

    	return block;
    }

    // (161:8) {#each deliveryPointsUpdSorted as point}
    function create_each_block(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1, create_if_block_2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*checked5*/ ctx[7] && /*point*/ ctx[35].Show) return 0;
    		if (!/*checked5*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(161:8) {#each deliveryPointsUpdSorted as point}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div0;
    	let t0;
    	let main;
    	let div1;
    	let t1;
    	let aside;
    	let input0;
    	let t2;
    	let input1;
    	let t3;
    	let input2;
    	let t4;
    	let section0;
    	let ul;
    	let li0;
    	let input3;
    	let t5;
    	let label0;
    	let t7;
    	let li1;
    	let input4;
    	let t8;
    	let label1;
    	let t10;
    	let li2;
    	let input5;
    	let t11;
    	let label2;
    	let t13;
    	let section1;
    	let input6;
    	let t14;
    	let label3;
    	let t16;
    	let section2;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*Loaded*/ ctx[8] === false && create_if_block_3(ctx);
    	let if_block1 = /*deliveryPointsUpdSorted*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			main = element("main");
    			div1 = element("div");
    			t1 = space();
    			aside = element("aside");
    			input0 = element("input");
    			t2 = space();
    			input1 = element("input");
    			t3 = space();
    			input2 = element("input");
    			t4 = space();
    			section0 = element("section");
    			ul = element("ul");
    			li0 = element("li");
    			input3 = element("input");
    			t5 = space();
    			label0 = element("label");
    			label0.textContent = "Show inside MKAD";
    			t7 = space();
    			li1 = element("li");
    			input4 = element("input");
    			t8 = space();
    			label1 = element("label");
    			label1.textContent = "Remove >5% delivery";
    			t10 = space();
    			li2 = element("li");
    			input5 = element("input");
    			t11 = space();
    			label2 = element("label");
    			label2.textContent = "Remove overlapping";
    			t13 = space();
    			section1 = element("section");
    			input6 = element("input");
    			t14 = space();
    			label3 = element("label");
    			label3.textContent = "Hide unused points";
    			t16 = space();
    			section2 = element("section");
    			if (if_block1) if_block1.c();
    			add_location(div0, file, 120, 0, 3757);
    			attr_dev(div1, "id", "map");
    			attr_dev(div1, "class", "svelte-10h86zr");
    			add_location(div1, file, 126, 2, 3842);
    			attr_dev(input0, "type", "button");
    			input0.value = "select GeoObject file";
    			add_location(input0, file, 128, 4, 3879);
    			set_style(input1, "display", "none");
    			attr_dev(input1, "type", "file");
    			attr_dev(input1, "accept", ".json");
    			add_location(input1, file, 129, 4, 3971);
    			attr_dev(input2, "type", "button");
    			input2.value = "clear map";
    			add_location(input2, file, 130, 4, 4090);
    			attr_dev(input3, "class", "cb_item");
    			attr_dev(input3, "id", "sc2");
    			attr_dev(input3, "type", "checkbox");
    			add_location(input3, file, 135, 10, 4253);
    			attr_dev(label0, "for", "sc2");
    			add_location(label0, file, 137, 10, 4355);
    			add_location(li0, file, 134, 8, 4237);
    			attr_dev(input4, "class", "cb_item");
    			attr_dev(input4, "id", "sc3");
    			attr_dev(input4, "type", "checkbox");
    			input4.disabled = /*disabled3*/ ctx[5];
    			add_location(input4, file, 140, 10, 4437);
    			attr_dev(label1, "for", "sc3");
    			toggle_class(label1, "disabled", /*disabled3*/ ctx[5]);
    			add_location(label1, file, 142, 10, 4560);
    			add_location(li1, file, 139, 8, 4421);
    			attr_dev(input5, "class", "cb_item");
    			attr_dev(input5, "id", "sc4");
    			attr_dev(input5, "type", "checkbox");
    			input5.disabled = /*disabled4*/ ctx[9];
    			add_location(input5, file, 145, 10, 4672);
    			attr_dev(label2, "for", "sc4");
    			toggle_class(label2, "disabled", /*disabled4*/ ctx[9]);
    			add_location(label2, file, 147, 10, 4794);
    			add_location(li2, file, 144, 8, 4656);
    			attr_dev(ul, "class", "cb");
    			add_location(ul, file, 133, 6, 4212);
    			attr_dev(section0, "class", "dpselection svelte-10h86zr");
    			add_location(section0, file, 132, 4, 4175);
    			attr_dev(input6, "class", "cb_item");
    			attr_dev(input6, "id", "sc5");
    			attr_dev(input6, "type", "checkbox");
    			add_location(input6, file, 153, 6, 4948);
    			attr_dev(label3, "for", "sc5");
    			add_location(label3, file, 155, 6, 5044);
    			attr_dev(section1, "class", "dphide svelte-10h86zr");
    			add_location(section1, file, 152, 4, 4916);
    			attr_dev(section2, "class", "dplist svelte-10h86zr");
    			add_location(section2, file, 158, 4, 5111);
    			attr_dev(aside, "class", "svelte-10h86zr");
    			add_location(aside, file, 127, 2, 3866);
    			attr_dev(main, "class", "svelte-10h86zr");
    			add_location(main, file, 125, 0, 3832);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			if (if_block0) if_block0.m(div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div1);
    			append_dev(main, t1);
    			append_dev(main, aside);
    			append_dev(aside, input0);
    			append_dev(aside, t2);
    			append_dev(aside, input1);
    			/*input1_binding*/ ctx[16](input1);
    			append_dev(aside, t3);
    			append_dev(aside, input2);
    			append_dev(aside, t4);
    			append_dev(aside, section0);
    			append_dev(section0, ul);
    			append_dev(ul, li0);
    			append_dev(li0, input3);
    			input3.checked = /*checked2*/ ctx[1];
    			append_dev(li0, t5);
    			append_dev(li0, label0);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(li1, input4);
    			input4.checked = /*checked3*/ ctx[2];
    			append_dev(li1, t8);
    			append_dev(li1, label1);
    			append_dev(ul, t10);
    			append_dev(ul, li2);
    			append_dev(li2, input5);
    			input5.checked = /*checked4*/ ctx[6];
    			append_dev(li2, t11);
    			append_dev(li2, label2);
    			append_dev(aside, t13);
    			append_dev(aside, section1);
    			append_dev(section1, input6);
    			input6.checked = /*checked5*/ ctx[7];
    			append_dev(section1, t14);
    			append_dev(section1, label3);
    			append_dev(aside, t16);
    			append_dev(aside, section2);
    			if (if_block1) if_block1.m(section2, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "click", /*click_handler*/ ctx[14], false, false, false),
    					listen_dev(input1, "change", /*change_handler*/ ctx[15], false, false, false),
    					listen_dev(input2, "click", /*removeDeliveryPolygons*/ ctx[11], false, false, false),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[17]),
    					listen_dev(input4, "change", /*input4_change_handler*/ ctx[18]),
    					listen_dev(input5, "change", /*input5_change_handler*/ ctx[19]),
    					listen_dev(input6, "change", /*input6_change_handler*/ ctx[20])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*Loaded*/ ctx[8] === false) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_3(ctx);
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty[0] & /*checked2*/ 2) {
    				input3.checked = /*checked2*/ ctx[1];
    			}

    			if (!current || dirty[0] & /*disabled3*/ 32) {
    				prop_dev(input4, "disabled", /*disabled3*/ ctx[5]);
    			}

    			if (dirty[0] & /*checked3*/ 4) {
    				input4.checked = /*checked3*/ ctx[2];
    			}

    			if (dirty[0] & /*disabled3*/ 32) {
    				toggle_class(label1, "disabled", /*disabled3*/ ctx[5]);
    			}

    			if (dirty[0] & /*checked4*/ 64) {
    				input5.checked = /*checked4*/ ctx[6];
    			}

    			if (dirty[0] & /*checked5*/ 128) {
    				input6.checked = /*checked5*/ ctx[7];
    			}

    			if (/*deliveryPointsUpdSorted*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*deliveryPointsUpdSorted*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section2, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (if_block0) if_block0.d();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);
    			/*input1_binding*/ ctx[16](null);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let geoJSON, fileinput, myMap, squareMKAD, polygonMKAD;
    	let deliveryPoints, deliveryPointsUpd, deliveryPointsUpdSorted = [];
    	let disabled3 = true, disabled4 = true;
    	let checked2 = false, checked3 = false, checked4 = false, checked5 = false;
    	let center = [55.78361503443606, 37.600883000000006];
    	let zoom = 11;
    	let Loaded = false;

    	let optionsMKAD = {
    		fillColor: '#3388ee',
    		strokeColor: '#0000FF',
    		opacity: 0.15,
    		strokeWidth: 3,
    		strokeStyle: 'shortdash'
    	};

    	const onFileSelected = e => {
    		let file = e.target.files[0];
    		let reader = new FileReader();
    		reader.readAsText(file);
    		reader.onload = e => $$invalidate(12, geoJSON = e.target.result);
    	};

    	const removeDeliveryPolygons = () => {
    		clearPolygons();
    		$$invalidate(12, geoJSON = null);
    		$$invalidate(0, deliveryPointsUpdSorted = []);
    		$$invalidate(1, checked2 = false);
    		$$invalidate(2, checked3 = false);
    		$$invalidate(5, disabled3 = true);
    	};

    	// очищаем карту от полигонов
    	function clearPolygons() {
    		deliveryPointsUpdSorted.forEach(n => myMap.geoObjects.remove(n.Polygon));
    	}

    	// русуем все полигоны
    	const showPolygons = () => {
    		deliveryPointsUpdSorted.forEach(n => myMap.geoObjects.add(n.Polygon));
    	};

    	// показываем все полигоны
    	const getAllPolygons = () => {
    		deliveryPointsUpdSorted.forEach(n => n.Show = true);
    		$$invalidate(0, deliveryPointsUpdSorted = [...deliveryPointsUpdSorted]);
    	};

    	// вычисляем полигоны в пределах МКАД
    	const getPolygonsInsideMKAD = () => {
    		$$invalidate(0, deliveryPointsUpdSorted = deliveryPointsUpdSorted.map(n => {
    			let geoCenter = ymaps.util.bounds.getCenter(n.Polygon.geometry.getBounds());
    			n.Show = polygonMKAD.geometry.contains(geoCenter) ? true : false;
    			return n;
    		}));
    	};

    	// русуем полигоны <5% от площади МКАД
    	const showPolygons5 = () => {
    		deliveryPointsUpdSorted.forEach(n => {
    			n.Square / squareMKAD * 100 < 5
    			? n.Show = n.Show
    			: n.Show = false;
    		});

    		$$invalidate(0, deliveryPointsUpdSorted = [...deliveryPointsUpdSorted]);
    	};

    	const sortDeliveryPoints = () => {
    		// сортируем по площади по убыванию, чтобы бОльшие по площади рисовались первыми
    		$$invalidate(0, deliveryPointsUpdSorted = deliveryPointsUpd.sort((a, b) => b.Square - a.Square));
    	};

    	const showMKAD = () => {
    		let mkad = swapXY(MKAD);

    		polygonMKAD = new ymaps.GeoObject({
    				geometry: { type: "Polygon", coordinates: [mkad] },
    				properties: { balloonContent: "mkad" }
    			},
    		optionsMKAD);

    		myMap.geoObjects.add(polygonMKAD);

    		// вычисляем площадь МКАД
    		squareMKAD = Math.round(ymaps.util.calculateArea(polygonMKAD));
    	}; // console.log('areaMKAD..', (squareMKAD / 1e6).toFixed(3),' км²' );

    	const loadMap = () => {
    		$$invalidate(4, myMap = new ymaps.Map("map", { center, zoom }));
    		$$invalidate(8, Loaded = true);
    		showMKAD(); // после монтирования показываем карту МКАД
    	};

    	onMount(() => ymaps.ready(['util.calculateArea']).then(loadMap));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => fileinput.click();
    	const change_handler = e => onFileSelected(e);

    	function input1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			fileinput = $$value;
    			$$invalidate(3, fileinput);
    		});
    	}

    	function input3_change_handler() {
    		checked2 = this.checked;
    		$$invalidate(1, checked2);
    	}

    	function input4_change_handler() {
    		checked3 = this.checked;
    		($$invalidate(2, checked3), $$invalidate(1, checked2));
    	}

    	function input5_change_handler() {
    		checked4 = this.checked;
    		$$invalidate(6, checked4);
    	}

    	function input6_change_handler() {
    		checked5 = this.checked;
    		$$invalidate(7, checked5);
    	}

    	$$self.$capture_state = () => ({
    		onMount,
    		swapXY,
    		MKAD,
    		PointObject,
    		DeliveryPoint: DelieryPoint,
    		geoJSON,
    		fileinput,
    		myMap,
    		squareMKAD,
    		polygonMKAD,
    		deliveryPoints,
    		deliveryPointsUpd,
    		deliveryPointsUpdSorted,
    		disabled3,
    		disabled4,
    		checked2,
    		checked3,
    		checked4,
    		checked5,
    		center,
    		zoom,
    		Loaded,
    		optionsMKAD,
    		onFileSelected,
    		removeDeliveryPolygons,
    		clearPolygons,
    		showPolygons,
    		getAllPolygons,
    		getPolygonsInsideMKAD,
    		showPolygons5,
    		sortDeliveryPoints,
    		showMKAD,
    		loadMap
    	});

    	$$self.$inject_state = $$props => {
    		if ('geoJSON' in $$props) $$invalidate(12, geoJSON = $$props.geoJSON);
    		if ('fileinput' in $$props) $$invalidate(3, fileinput = $$props.fileinput);
    		if ('myMap' in $$props) $$invalidate(4, myMap = $$props.myMap);
    		if ('squareMKAD' in $$props) squareMKAD = $$props.squareMKAD;
    		if ('polygonMKAD' in $$props) polygonMKAD = $$props.polygonMKAD;
    		if ('deliveryPoints' in $$props) $$invalidate(13, deliveryPoints = $$props.deliveryPoints);
    		if ('deliveryPointsUpd' in $$props) deliveryPointsUpd = $$props.deliveryPointsUpd;
    		if ('deliveryPointsUpdSorted' in $$props) $$invalidate(0, deliveryPointsUpdSorted = $$props.deliveryPointsUpdSorted);
    		if ('disabled3' in $$props) $$invalidate(5, disabled3 = $$props.disabled3);
    		if ('disabled4' in $$props) $$invalidate(9, disabled4 = $$props.disabled4);
    		if ('checked2' in $$props) $$invalidate(1, checked2 = $$props.checked2);
    		if ('checked3' in $$props) $$invalidate(2, checked3 = $$props.checked3);
    		if ('checked4' in $$props) $$invalidate(6, checked4 = $$props.checked4);
    		if ('checked5' in $$props) $$invalidate(7, checked5 = $$props.checked5);
    		if ('center' in $$props) center = $$props.center;
    		if ('zoom' in $$props) zoom = $$props.zoom;
    		if ('Loaded' in $$props) $$invalidate(8, Loaded = $$props.Loaded);
    		if ('optionsMKAD' in $$props) optionsMKAD = $$props.optionsMKAD;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*checked2*/ 2) {
    			checked2 ? getPolygonsInsideMKAD() : getAllPolygons();
    		}

    		if ($$self.$$.dirty[0] & /*checked2*/ 2) {
    			if (!checked2) {
    				$$invalidate(5, disabled3 = true);
    				$$invalidate(2, checked3 = false);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*checked3*/ 4) {
    			checked3 ? showPolygons5() : getPolygonsInsideMKAD();
    		}

    		if ($$self.$$.dirty[0] & /*checked2*/ 2) {
    			$$invalidate(5, disabled3 = checked2 ? false : true);
    		}

    		if ($$self.$$.dirty[0] & /*deliveryPointsUpdSorted*/ 1) {
    			if (deliveryPointsUpdSorted) {
    				clearPolygons();
    				showPolygons();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*geoJSON, deliveryPoints*/ 12288) {
    			if (geoJSON) {
    				let geoObj = JSON.parse(geoJSON);
    				$$invalidate(13, deliveryPoints = geoObj["Result 1"]);
    				deliveryPointsUpd = deliveryPoints.map(n => new PointObject(n));
    				sortDeliveryPoints();
    			} // console.log('geoJSON upd...', deliveryPointsUpd);
    		}
    	};

    	return [
    		deliveryPointsUpdSorted,
    		checked2,
    		checked3,
    		fileinput,
    		myMap,
    		disabled3,
    		checked4,
    		checked5,
    		Loaded,
    		disabled4,
    		onFileSelected,
    		removeDeliveryPolygons,
    		geoJSON,
    		deliveryPoints,
    		click_handler,
    		change_handler,
    		input1_binding,
    		input3_change_handler,
    		input4_change_handler,
    		input5_change_handler,
    		input6_change_handler
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
